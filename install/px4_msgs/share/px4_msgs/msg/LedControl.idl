// generated from rosidl_adapter/resource/msg.idl.em
// with input from px4_msgs/msg/LedControl.msg
// generated code does not contain a copyright notice


module px4_msgs {
  module msg {
    module LedControl_Constants {
      const uint8 COLOR_OFF = 0;
      const uint8 COLOR_RED = 1;
      const uint8 COLOR_GREEN = 2;
      const uint8 COLOR_BLUE = 3;
      const uint8 COLOR_YELLOW = 4;
      const uint8 COLOR_PURPLE = 5;
      const uint8 COLOR_AMBER = 6;
      const uint8 COLOR_CYAN = 7;
      const uint8 COLOR_WHITE = 8;
      const uint8 MODE_OFF = 0;
      const uint8 MODE_ON = 1;
      const uint8 MODE_DISABLED = 2;
      const uint8 MODE_BLINK_SLOW = 3;
      const uint8 MODE_BLINK_NORMAL = 4;
      const uint8 MODE_BLINK_FAST = 5;
      const uint8 MODE_BREATHE = 6;
      const uint8 MODE_FLASH = 7;
      const uint8 MAX_PRIORITY = 2;
      const uint8 ORB_QUEUE_LENGTH = 8;
    };
    @verbatim (language="comment", text=
      " LED control: control a single or multiple LED's." "\n"
      " These are the externally visible LED's, not the board LED's")
    struct LedControl {
      @verbatim (language="comment", text=
        " time since system start (microseconds)")
      uint64 timestamp;

      @verbatim (language="comment", text=
        " bitmask which LED(s) to control, set to 0xff for all")
      uint8 led_mask;

      @verbatim (language="comment", text=
        " see COLOR_*")
      uint8 color;

      @verbatim (language="comment", text=
        " see MODE_*")
      uint8 mode;

      @verbatim (language="comment", text=
        " how many times to blink (number of on-off cycles if mode is one of MODE_BLINK_*) . Set to 0 for infinite" "\n"
        " in MODE_FLASH it is the number of cycles. Max number of blinks: 122 and max number of flash cycles: 20")
      uint8 num_blinks;

      @verbatim (language="comment", text=
        " priority: higher priority events will override current lower priority events (see MAX_PRIORITY)")
      uint8 priority;
    };
  };
};
