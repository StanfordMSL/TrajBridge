// generated from rosidl_adapter/resource/msg.idl.em
// with input from px4_msgs/msg/MissionResult.msg
// generated code does not contain a copyright notice


module px4_msgs {
  module msg {
    module MissionResult_Constants {
      const uint8 MISSION_EXECUTION_MODE_NORMAL = 0;
      const uint8 MISSION_EXECUTION_MODE_REVERSE = 1;
      const uint8 MISSION_EXECUTION_MODE_FAST_FORWARD = 2;
    };
    struct MissionResult {
      @verbatim (language="comment", text=
        " time since system start (microseconds)")
      uint64 timestamp;

      @verbatim (language="comment", text=
        " Instance count of this mission. Increments monotonically whenever the mission is modified")
      uint32 instance_count;

      @verbatim (language="comment", text=
        " Sequence of the mission item which has been reached, default -1")
      int32 seq_reached;

      @verbatim (language="comment", text=
        " Sequence of the current mission item")
      uint16 seq_current;

      @verbatim (language="comment", text=
        " Total number of mission items")
      uint16 seq_total;

      @verbatim (language="comment", text=
        " true if mission is valid")
      boolean valid;

      @verbatim (language="comment", text=
        " true if mission is valid, but has potentially problematic items leading to safety warnings")
      boolean warning;

      @verbatim (language="comment", text=
        " true if mission has been completed")
      boolean finished;

      @verbatim (language="comment", text=
        " true if the mission cannot continue or be completed for some reason")
      boolean failure;

      @verbatim (language="comment", text=
        " true if the number of do jumps remaining has changed")
      boolean item_do_jump_changed;

      @verbatim (language="comment", text=
        " indicate which item has changed")
      uint16 item_changed_index;

      @verbatim (language="comment", text=
        " set to the number of do jumps remaining for that item")
      uint16 item_do_jump_remaining;

      @verbatim (language="comment", text=
        " indicates the mode in which the mission is executed")
      uint8 execution_mode;
    };
  };
};
